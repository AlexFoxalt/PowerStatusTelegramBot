import pdb
from datetime import datetime
import re
import telegram
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
)

from app.decorators import admin_only
from app.logger import logger
from app.tasks import ping
from app.utils import format_time, convert_tz
from config.base import Config as Cfg
from config.consts import INFO_TEXT, REG_TEXT, SUPPORT_TEXT
from db.base import DB
from db.models import User, Base, Light, Message
from db.utils import is_registered, get_subscribed_users, get_last_light_value

SELECTED_FLAT, SUPPORT_MSG, SELECTED_HOME, SELECTED_NONE = range(4)
PREV_LIGHT_VALUE = None


@admin_only
async def migrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with DB.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)
    await DB.dispose()


@admin_only
async def msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_id, message = re.findall(r"/msg (\d*) (.*)", update.message.text)[0]
    await context.bot.send_message(
        chat_id=target_id,
        parse_mode=telegram.constants.ParseMode.HTML,
        text=message
        + "\n\n<i>*–Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –æ–Ω–æ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è</i>",
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"Successfully sent message to {target_id}",
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"üí° –°–≤–µ—Ç üí°", callback_data="light_info")],
        [InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stat_info")],
        [InlineKeyboardButton(f"üì≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üì≥", callback_data="sub_info")],
        [InlineKeyboardButton(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üí¨", callback_data="support_info")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ë–æ—Ç–µ ‚ÑπÔ∏è", callback_data="bot_info")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=reply_markup,
        parse_mode=telegram.constants.ParseMode.HTML,
    )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    possibles = globals().copy()
    possibles.update(locals())
    return await possibles.get(query.data)(update, context)


async def light_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_q = select(Light).order_by(Light.time_created.desc())
        result = await session.execute(db_q)
        light = result.scalars().first()

    light.time_created = convert_tz(light.time_created)

    if light.value:
        text_status = "–°–≤–µ—Ç–∞ –Ω–µ—Ç üî¥"
        text_time = "–í—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"
    else:
        text_status = "–°–≤–µ—Ç –µ—Å—Ç—å üü¢"
        text_time = "–í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n"
        f"üìÉ –°—Ç–∞—Ç—É—Å: {text_status}\n"
        f"üìÜ {text_time}: {format_time(light.time_created)}",
    )


async def sub_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_status_mapping = {
        True: "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üëç",
        False: "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üëé",
    }
    button_status_mapping = {
        False: [InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="sub_me")],
        True: [InlineKeyboardButton(f"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsub_me")],
    }
    query = update.callback_query

    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_q = select(User).where(User.tg_id == query.from_user["id"])
        result = await session.execute(db_q)
        user_sub_status = result.scalars().first().news_subscribed

    keyboard = [button_status_mapping[user_sub_status]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{user_status_mapping[user_sub_status]}",
        reply_markup=reply_markup,
    )


async def sub_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_q = select(User).where(User.tg_id == query.from_user["id"])
        result = await session.execute(db_q)
        user = result.scalars().first()
        if not user.news_subscribed:
            user.news_subscribed = True
            await session.commit()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ",
            )


async def unsub_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_q = select(User).where(User.tg_id == query.from_user["id"])
        result = await session.execute(db_q)
        user = result.scalars().first()
        if user.news_subscribed:
            user.news_subscribed = False
            await session.commit()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚úÖ",
            )


async def bot_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        parse_mode=telegram.constants.ParseMode.HTML,
        text=INFO_TEXT,
    )


async def support_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        parse_mode=telegram.constants.ParseMode.HTML,
        text=SUPPORT_TEXT,
    )
    return SUPPORT_MSG


async def stat_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        parse_mode=telegram.constants.ParseMode.HTML,
        text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
    )


async def register_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user["id"]
    text = update.message.text

    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_msg = Message(message=text, user_id=int(user))
        session.add(db_msg)
        await session.commit()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        parse_mode=telegram.constants.ParseMode.HTML,
        text=f"–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ‚úîÔ∏è",
    )

    await context.bot.send_message(
        chat_id=Cfg.ADMIN_ID,
        parse_mode=telegram.constants.ParseMode.HTML,
        text=f"‚ÄºÔ∏è <b>New message to support detected</b> ‚ÄºÔ∏è\n"
        f"From: {user}\n"
        f"Msg: {text}",
    )
    return ConversationHandler.END


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_registered(update.message.from_user.id):
        return await menu(update, context)
    else:
        return await register_step_one(update, context)


async def register_step_one(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–ë", "–ì", "–í"], ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    await update.message.reply_text(
        REG_TEXT,
        parse_mode=telegram.constants.ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–ê–¥—Ä–µ—Å –¥–æ–º–∞"
        ),
    )
    return SELECTED_HOME


async def register_step_two(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return await register_end(update, context)

    context.user_data["home"] = update.message.text
    reply_keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–∞—à –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã?\n(–≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä–∞–º–∏)",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            input_field_placeholder="–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        ),
        parse_mode=telegram.constants.ParseMode.HTML,
    )
    return SELECTED_FLAT


async def register_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        flat = None
    else:
        flat = int(update.message.text)
    user = update.message.from_user

    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        async with session.begin():
            session.add(
                User(
                    tg_id=user.id,
                    username=user.username,
                    home=context.user_data.get("home", None),
                    flat=flat,
                )
            )
        await session.commit()
    await DB.dispose()

    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!"
    )
    return await start(update, context)


async def run_status_update(context: ContextTypes.DEFAULT_TYPE):
    global PREV_LIGHT_VALUE

    if PREV_LIGHT_VALUE is None:
        PREV_LIGHT_VALUE = await get_last_light_value()

    status = ping(Cfg.ROUTER_IP)
    if PREV_LIGHT_VALUE == status:
        # If no changes were noticed, just pass
        return

    async_session = sessionmaker(DB, expire_on_commit=False, class_=AsyncSession)
    async with async_session() as session:
        db_q = select(Light.time_created).order_by(Light.time_created.desc())
        result = await session.execute(db_q)
        last_light_status = result.scalars().first()
        mins_from_prev = (
            datetime.utcnow() - last_light_status.replace(tzinfo=None)
        ).seconds // 60
        session.add(Light(value=status, mins_from_prev=mins_from_prev))
        await session.commit()
        logger.info(
            f"Created new object of Light. Switch {PREV_LIGHT_VALUE} -> {status}. Hours passed {mins_from_prev}h."
        )

    PREV_LIGHT_VALUE = status
    subscribed_users = await get_subscribed_users()

    if status:
        text = "üí° <b>–í–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç</b> üí°\n\n<i>*–≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É</i>"
    else:
        text = "üö´ <b>–°–≤–µ—Ç –≤—ã–∫–ª—é—á–∏–ª–∏</b> üö´\n\n<i>*–≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É</i>"

    for user_tg_id in subscribed_users:
        await context.bot.send_message(
            chat_id=user_tg_id, text=text, parse_mode=telegram.constants.ParseMode.HTML
        )


if __name__ == "__main__":
    app = ApplicationBuilder().token(Cfg.TG_TOKEN).build()
    job_queue = app.job_queue
    app.add_handler(
        ConversationHandler(
            entry_points=[CallbackQueryHandler(callback_handler)],
            fallbacks=[],
            states={
                SUPPORT_MSG: [MessageHandler(filters.ALL, register_support_message)]
            },
        )
    )
    app.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            fallbacks=[],
            states={
                SELECTED_NONE: [MessageHandler(filters.ALL, register_step_one)],
                SELECTED_HOME: [
                    MessageHandler(
                        filters.Regex(r"^(–ë|–í|–ì|–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)$"), register_step_two
                    )
                ],
                SELECTED_FLAT: [
                    MessageHandler(filters.Regex(r"^([0-9]{1,3})$"), register_end)
                ],
            },
        )
    )
    app.add_handler(CommandHandler("migrate", migrate))
    app.add_handler(CommandHandler("msg", msg))
    job_status_update = job_queue.run_repeating(
        run_status_update, interval=60, first=10
    )
    app.run_polling()
